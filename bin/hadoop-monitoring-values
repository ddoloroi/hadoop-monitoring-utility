#!/usr/bin/env python
import argparse
import logging
import os
import socket

from monitoring.config import get_config_variants, load_config
from monitoring.service import CollectorService
from monitoring.utils import setup_logging


def parse_args(args=None):
    parser = argparse.ArgumentParser()
    variants = ','.join(get_config_variants())
    parser.add_argument('-c', '--config', type=str,
                        help='configuration file, [search for %s]' % variants,
                        default=None)
    parser.add_argument('--host', type=str,
                        default=socket.gethostname(),
                        help="monitoring host [%(default)s]")
    parser.add_argument('--subagent', action='store_true',
                        help='subagent readable output [false]')
    parser.add_argument('pattern', type=str,
                        nargs="?", help='filter pattern')
    return parser.parse_args(args)


def main(args):
    config = load_config(args.config)
    setup_logging(config.logging)
    global logger
    logger = logging.getLogger('monitoring')
    try:
        logger.info('start: \n%s', args)
        logger.info('config: \n%s', config)
        service = CollectorService(args.host)
        metrics = service.collect(config.base.oid, config.base.name)
        if config.locator.service_map is not None:
            service.check_services(
                metrics, config.locator.service_map, config.base.name)
        print service.output(
            metrics, args.pattern, 'subagent' if args.subagent else 'human')
    except Exception, e:
        logger.exception(e)
        logger.info('done with code 1\n')
        exit(1)
    logger.info('done with code 0\n')
    exit(0)

if __name__ == '__main__':
    args = parse_args()
    main(args)
